* Problem

  There are two problem areas for which caching is a highly desirable:

** Server subscriptions

   Using the same endpoint in different compscribe specs is often
   desirable and caching could be used to prevent that by caching the
   deltas or the current sum and providing a service that uses that
   cache once the subscription has gone live.

*** Solution

    A solution would be to wrap the user specified service to
    implement such behavior.

** Reused specs in different compscriptions
   
   The same compscription spec may be reused nested in many
   compscription specs.  For identical ids, identical compscription
   processes will be spawned on arbitrary nesting levels in completely
   independent root compscriptions.  Also, the sums will be calculated
   multiple times into non identical values which use up unnecessary
   space.

*** Solution idea

    The compscriber service could identify identical parts in all
    specs and inject a cached compscriber service as an internal
    endpoint.  Using the :sum caching, we would end up with identical
    values, /because/ we don't break :is deltas in compscribe
    transport.

    (We could also allow a way for the user to specify direct
    references in a spec to keys in the specmap directly, as a
    convenience.  This would relieve users from using lots of defs, to
    reuse their specs in each other.)
